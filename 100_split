{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"V28","machine_shape":"hm","authorship_tag":"ABX9TyNhUQDs6B+3B677ZNzrVlWq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hXw-FuhdCmm7","executionInfo":{"status":"ok","timestamp":1734276047399,"user_tz":-330,"elapsed":24457,"user":{"displayName":"Chaitanya","userId":"11737175569404139358"}},"outputId":"781dcb39-e79d-42dc-a76f-758696dcd21d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import numpy as np\n","merged_signals = np.load('/content/drive/MyDrive/30000/merged_signals_30000.npy')\n","merged_labels = np.load('/content/drive/MyDrive/30000/merged_labels_30000.npy')"],"metadata":{"id":"UpwD759ECuqs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merged_labels_100 = merged_labels[:100]\n","merged_signals_100 = merged_signals[:100]\n","np.save('/content/drive/MyDrive/30000/merged_signals_100.npy',merged_signals_100)\n","np.save('/content/drive/MyDrive/30000/merged_labels_100.npy',merged_labels_100)\n"],"metadata":{"id":"i9nbmY5_X6QB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.models import load_model\n","from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Step 1: Load the saved model\n","model = load_model('/content/drive/MyDrive/30000/best_30000_17db_model.h5')\n","merged_signals_100 = np.load(\"/content/drive/MyDrive/30000/merged_signals_100.npy\")\n","merged_labels_100 = np.load('/content/drive/MyDrive/30000/merged_labels_100.npy')\n"],"metadata":{"id":"5T6F05omYoR3","executionInfo":{"status":"ok","timestamp":1734276079659,"user_tz":-330,"elapsed":25985,"user":{"displayName":"Chaitanya","userId":"11737175569404139358"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["X_val = merged_signals_100\n","y_val = merged_labels_100\n","# Step 2: Evaluate the model on the test data\n","loss, accuracy = model.evaluate(X_val, y_val, verbose=0)\n","print(f\"Test Loss: {loss:.4f}\")\n","print(f\"Test Accuracy: {accuracy:.4f}\")\n","\n","# Step 3: Make predictions on the test data\n","predictions = model.predict(X_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cq-74LKCbwA8","executionInfo":{"status":"ok","timestamp":1734276080297,"user_tz":-330,"elapsed":655,"user":{"displayName":"Chaitanya","userId":"11737175569404139358"}},"outputId":"1d7bcf1d-a66d-47f6-c6e4-3ef35b403bab"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Loss: 0.3337\n","Test Accuracy: 0.7300\n","4/4 [==============================] - 0s 55ms/step\n"]}]},{"cell_type":"code","source":["\n","# Calculate the mean probability for predictions of the positive class\n","mean_pred = np.mean(predictions)  # Mean of the predicted probabilities\n","print(f\"Mean of positive class probabilities: {mean_pred}\")\n","\n","# Define a custom threshold (you can start with the mean and adjust if needed)\n","threshold = 0.50038\n","print(f\"Using threshold: {threshold}\")\n","\n","# Set threshold to classify predictions\n","predicted_classes = (predictions >= threshold).astype(int)\n","\n","# Determine if y_val is one-hot encoded or not\n","if len(y_val.shape) == 1:  # y_val is 1D\n","    y_val_classes = y_val  # Use directly\n","else:  # y_val is 2D (one-hot encoded)\n","    y_val_classes = np.argmax(y_val, axis=1)\n","\n","# Calculate precision, recall, and F1 score\n","precision = precision_score(y_val_classes, predicted_classes)\n","recall = recall_score(y_val_classes, predicted_classes)\n","f1 = f1_score(y_val_classes, predicted_classes)\n","\n","# Print precision, recall, and F1 score\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"Recall: {recall:.4f}\")\n","print(f\"F1 Score: {f1:.4f}\")\n","\n","# Create confusion matrix\n","conf_mat = confusion_matrix(y_val_classes, predicted_classes)\n","\n","# Print the confusion matrix\n","print(\"Confusion Matrix:\")\n","print(conf_mat)\n","\n","# Plotting the confusion matrix as a heatmap\n","plt.figure(figsize=(10, 7))\n","sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=np.unique(y_val_classes),\n","            yticklabels=np.unique(y_val_classes))\n","plt.ylabel('True Label')\n","plt.xlabel('Predicted Label')\n","plt.title('Confusion Matrix Heatmap')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":780},"id":"QxK7J1zgY2nK","executionInfo":{"status":"ok","timestamp":1734276081037,"user_tz":-330,"elapsed":746,"user":{"displayName":"Chaitanya","userId":"11737175569404139358"}},"outputId":"50654d47-883c-4c62-da39-962791d51a5a"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean of positive class probabilities: 0.4696888029575348\n","Using threshold: 0.50038\n","Precision: 0.9600\n","Recall: 0.5714\n","F1 Score: 0.7164\n","Confusion Matrix:\n","[[57  1]\n"," [18 24]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["merged_100_s = np.load(\"/content/drive/MyDrive/30000/merged_signals_100.npy\")\n","merged_100_l = np.load('/content/drive/MyDrive/30000/merged_labels_100.npy')\n","from tensorflow.keras.models import Model\n","\n","# Find the Flatten layer by its name\n","flatten_layer_name = \"flatten\"  # Replace with the actual name of your Flatten layer\n","\n","# Create a new model that outputs the activation of the Flatten layer\n","intermediate_model = Model(inputs=model.input, outputs=model.get_layer(flatten_layer_name).output)\n","# Get the output from the Flatten layer\n","flatten_output = intermediate_model.predict(merged_100_s)\n","\n","# Print or inspect the Flatten layer output\n","print(\"Flatten layer output shape:\", flatten_output.shape)\n","print(flatten_output)\n","np.save('/content/drive/MyDrive/30000/flatten_output.npy',flatten_output)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fLb5LV8crC-5","executionInfo":{"status":"ok","timestamp":1734276092534,"user_tz":-330,"elapsed":1200,"user":{"displayName":"Chaitanya","userId":"11737175569404139358"}},"outputId":"0d3c8164-9ef6-4f1d-a603-1fd55a8d6918"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 0s 54ms/step\n","Flatten layer output shape: (100, 47232)\n","[[0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," ...\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"vBpX63RPscU6"},"execution_count":null,"outputs":[]}]}